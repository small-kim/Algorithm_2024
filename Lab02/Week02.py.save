def UE(arr):
	n = len(arr)
	for i in range(n - 1):
		for j in range(i + 1, n):
			if arr[i] == arr[j]:
				return False
	return True

def GE(A):
	n = len(A)
	for i in range(n - 1):
		for j in range(i + 1, n):
			for k in range(i, n):
				A[j][k] -= A[i][k] * A[j][i] / A[i][i]
		return A

def binRec(n):
	if n == 1:
		return 1
	else:
		return binRec(n // 2) + 1


def climb_stairs_recursive(n):
    	if n <= 0:
        	return 0
    	elif n == 1:
        	return 1
    	elif n == 2:
        	return 2
    	else:
        	return climb_stairs_recursive(n - 1) + climb_stairs_recursive(n - 2)

def climb_stairs_dp(n):
	if n <= 0:
        	return 0
    	elif n == 1:
        	return 1
    	elif n == 2:
        	return 2
    	else:
        	dp = [0] * (n + 1)
        	dp[1] = 1
	        dp[2] = 2
        	for i in range(3, n + 1):
            		dp[i] = dp[i - 1] + dp[i - 2]
        	return dp[n]

def climb_stairs_formula(n):
    	if n <= 0:
        	return 0
   	elif n == 1:
        	return 1
	elif n == 2:
        	return 2
    	else:
        	sqrt_5 = 5 ** 0.5
        	fib_n = (((1 + sqrt_5) / 2) ** n - ((1 - sqrt_5) / 2) ** n) / sqrt_5
        	return int(fib_n)
